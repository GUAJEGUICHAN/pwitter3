{"version":3,"sources":["fbInstance.js","components/Pweet.jsx","components/PweetFactory.jsx","routes/Home.jsx","routes/Profile.jsx","components/Navigation.jsx","routes/Auth.jsx","components/AppRouter.jsx","components/App.jsx","index.js"],"names":["firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storageService","storage","Pweet","pweetObj","useState","isEditing","setIsEditing","text","newPweet","setNewPweet","onSubmit","event","preventDefault","window","confirm","updateDoc","doc","getFirestore","id","type","value","onChange","target","required","imgURL","src","height","alt","onClick","deleteDoc","deleteObject","ref","getStorage","PweetFactory","userObj","setText","setImageURL","image","useRef","a","currentAttachment","storageRef","uid","uud4","uploadString","response","getDownloadURL","then","URL","onFileChange","addDoc","collection","createdAt","Date","now","getAuth","currentUser","current","theFile","files","reader","FileReader","readAsDataURL","onloadend","e","result","placeholder","console","log","accept","Home","pweets","setPweets","useEffect","mounted","q","query","orderBy","onSnapshot","asdf","docs","map","data","i","Profile","refreshName","nameRef","displayName","myPweets","setMyPweets","mount","where","updateProfile","catch","pweet","Navigation","to","Auth","toggle","setToggle","emailRef","psRef","quickLogin","provider","innerHTML","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","signInWithEmailAndPassword","r","createUserWithEmailAndPassword","AppRouter","loggedIn","path","exact","App","setUserObj","onAuthStateChanged","user","Object","assign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79ba81cb.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport * as firebase from \"firebase/app\";\nimport * as auth from \"firebase/auth\"\nimport * as firestore from \"firebase/firestore\"\nimport * as storage from \"firebase/storage\"\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDr9U6QU_LlSwmsNjvfY4xgolctgBY59uU\",\n    authDomain: \"nwitter-42dcd.firebaseapp.com\",\n    projectId: \"nwitter-42dcd\",\n    storageBucket: \"nwitter-42dcd.appspot.com\",\n    messagingSenderId: \"478711380670\",\n    appId: \"1:478711380670:web:2b040e8f9e2dc59fe0bcef\"\n};\nfirebase.initializeApp(firebaseConfig)\nexport const authService = auth\nexport const dbService = firestore\nexport const storageService = storage;\n// Initialize Firebase\n","import React, { useState } from 'react';\nimport { dbService, storageService } from '../fbInstance';\n\nconst Pweet = ({ pweetObj }) => {\n    const [isEditing, setIsEditing] = useState(false);\n    const [newPweet, setNewPweet] = useState(pweetObj.text);\n    const onDelete = () => {\n        const ok = window.confirm(\"진짜 삭제?\")\n        if (ok) {\n            dbService.deleteDoc(dbService.doc(dbService.getFirestore(), `pweet3/${pweetObj.id}`))\n            pweetObj.imgURL && storageService.deleteObject(storageService.ref(storageService.getStorage(), pweetObj.imgURL))\n        }\n\n    }\n    const onChange = (event) => {\n        const { target: { value } } = event;\n        setNewPweet(value);\n    }\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const ok = window.confirm(\"정말로 수정하시겠습니까?\")\n        if (ok) {\n            dbService.updateDoc(dbService.doc(dbService.getFirestore(), `pweet3/${pweetObj.id}`), {\n                text: newPweet\n            })\n        }\n        setIsEditing(false)\n    }\n\n    return (\n        <>\n            <div>{\n                isEditing ?\n                    <form onSubmit={onSubmit}>\n                        <input type=\"text\" value={newPweet} onChange={onChange} required />\n                        <input type=\"submit\" />\n                    </form>\n                    :\n                    <div>\n                        <span>{pweetObj.text}</span>\n                        {pweetObj.imgURL && <img src={pweetObj.imgURL} height=\"200px\" alt=\"img\" />}\n                    </div>\n            }</div>\n            <button onClick={onDelete}>Delete</button>\n            <button onClick={() => { setIsEditing(!isEditing) }} value={newPweet} >Edit</button>\n        </>\n\n    );\n};\n\nexport default Pweet;","import React, { useRef, useState } from 'react';\nimport { authService, dbService, storageService } from '../fbInstance';\nimport { v4 as uud4 } from \"uuid\"\n\n\nconst PweetFactory = ({ userObj }) => {\n    const [text, setText] = useState(\"\")\n    const [imgURL, setImageURL] = useState(\"\");\n    const image = useRef(\"\");\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        let currentAttachment = imgURL;\n        if (imgURL) {\n            const storageRef = storageService.ref(storageService.getStorage(), `${userObj.uid} / ${uud4()}`)//이름 만들어주자\n            const response = await storageService.uploadString(storageRef, currentAttachment, `data_url`)\n            await storageService.getDownloadURL(response.ref).then(URL => {\n                currentAttachment = URL;\n            })\n            onFileChange(null);\n        }\n\n        await dbService.addDoc(dbService.collection(dbService.getFirestore(), \"pweet3\"), {\n            text: text,\n            createdAt: Date.now(),\n            uid: authService.getAuth().currentUser.uid,\n            imgURL: currentAttachment\n        })\n        setText(\"\")\n    }\n    const onChange = (event) => {//입력값 동기화  \n        const { target: { value } } = event;\n        setText(value);\n        console.log(text);\n    }\n    const onFileChange = (event) => {\n        if (event === null) {\n            image.current.value = \"\"\n            setImageURL(\"\")\n            return;\n        }\n        const theFile = event.target.files[0]\n        const reader = new FileReader();\n        reader.readAsDataURL(theFile)\n        reader.onloadend = e => setImageURL(e.target.result)\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <input type=\"text\" placeholder=\"\" onChange={onChange} value={text} required />\n                <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n                <input type=\"submit\" />\n                {imgURL && <img src={imgURL} alt=\"imgPreview\" height=\"200px\" ref={image} />}\n            </form>\n        </div>\n    );\n};\n\nexport default PweetFactory;","import Pweet from '../components/Pweet';\nimport { dbService } from '../fbInstance';\nimport React, { useEffect, useState } from 'react';\nimport PweetFactory from '../components/PweetFactory';\nconst Home = ({ userObj }) => {\n    const [pweets, setPweets] = useState([])\n\n    useEffect(() => {\n        let mounted = true;\n        if (mounted === true) {\n            const q = dbService.query(dbService.collection(dbService.getFirestore(), \"pweet3\"), dbService.orderBy(\"createdAt\", \"desc\"))\n            dbService.onSnapshot(q, asdf => {\n                setPweets(asdf.docs.map(doc => ({\n                    id: doc.id,\n                    ...doc.data()\n                })))\n            })\n        }\n        return () => { mounted = false }\n    }, [])\n\n\n    return (\n        <div>\n            나는 Home component야 트위터 입력하게 해줄께\n            <PweetFactory userObj={userObj} />\n            {\n                pweets.map((pweetObj, i) =>\n                    <Pweet key={i} pweetObj={pweetObj} />\n                )\n            }\n\n        </div >\n    );\n};\n\nexport default Home;","import React, { useEffect, useRef, useState } from 'react';\nimport Pweet from '../components/Pweet';\nimport { authService, dbService } from '../fbInstance';\n\nconst Profile = ({ userObj, refreshName }) => {\n    // const [newName, setNewName] = useState(userObj.displayName)\n    const nameRef = useRef(authService.getAuth().currentUser.displayName)//displayname이 없다고 한다.\n    const [myPweets, setMyPweets] = useState([]);\n    //mount할때 자신이 쓴 트윗  보여주기\n    useEffect(() => {\n        let mount = true;\n        if (mount) {\n            const q = dbService.query(dbService.collection(dbService.getFirestore(), \"pweet3\"), dbService.where(\"uid\", \"==\", userObj.uid), dbService.orderBy(\"createdAt\", \"desc\"))\n            dbService.onSnapshot(q, asdf => (\n                setMyPweets(asdf.docs.map(doc => ({\n                    id: doc.id,\n                    ...doc.data()\n                })))\n            ))\n        }\n        return () => (mount = false)\n    }, [userObj])\n\n    //유저 이름 수정 제출 함수\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await authService.updateProfile(authService.getAuth().currentUser, {\n            displayName: nameRef.current.value\n        }).then(e => console.log(\"updateProfile가 then에 뱉는 값\", e)).catch(e => console.log(e));\n        refreshName()\n\n    }\n\n\n    return (\n        <div>\n            나는 Profile Component야\n            <form onSubmit={onSubmit}>\n                <input type=\"text\" required ref={nameRef} />\n                <input type=\"submit\" value=\"이름 수정\" />\n                {myPweets && myPweets.map((pweet, i) => <Pweet key={i} pweetObj={pweet} />)}\n                {console.log(\"myPweets\", myPweets)}\n            </form>\n        </div>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { authService } from '../fbInstance';\nconst Navigation = ({ userObj }) => {\n    return (\n        <div>\n\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/profile\">{authService.getAuth().currentUser.displayName || \"My\"}Profile</Link>\n        </div>\n    );\n};\n\nexport default Navigation;","import React, { useRef, useState } from 'react';\nimport { authService } from '../fbInstance';\n\nconst Auth = () => {\n    const [toggle, setToggle] = useState(false)\n    const emailRef = useRef(\"\");\n    const psRef = useRef(\"\");\n\n    const quickLogin = (e) => {\n        let provider\n        if (e.target.innerHTML === \"Google\") { provider = new authService.GoogleAuthProvider() }\n        else if (e.target.innerHTML === \"Github\") { provider = new authService.GithubAuthProvider() }\n        else { console.log(\"에러다 에러\") }\n        authService.signInWithPopup(authService.getAuth(), provider);\n    }\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        toggle ? authService.signInWithEmailAndPassword(authService.getAuth(), emailRef.current.value, psRef.current.value).then(r => console.log(\"로그인 성공\", r)).catch(e => console.log(\"에러\", e)) : authService.createUserWithEmailAndPassword(authService.getAuth(), emailRef.current.value, psRef.current.value).then(r => console.log(\"가입성공\", r)).catch(e => console.log(\"에러\", e))\n    }\n    return (\n        <div>\n            나는 Auth Component 지금 로그인 안되어 있음\n            <form onSubmit={onSubmit} >\n                <input type=\"text\" placeholder=\"이메일!\" required ref={emailRef} />\n                <input type=\"password\" placeholder=\"비번!\" required ref={psRef} />\n                <input type=\"submit\" value={toggle ? \"Create Account\" : \"Log In\"} />\n                <div onClick={() => setToggle(!toggle)} >{toggle ? \"Log In\" : \"Create Account\"}</div>\n            </form>\n            <div>간편 로그인\n                <button onClick={quickLogin}>Google</button>\n                <button onClick={quickLogin}>Github</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Auth;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Switch, Route } from 'react-router';\nimport Home from '../routes/Home';\nimport Profile from '../routes/Profile';\nimport Navigation from './Navigation';\nimport Auth from '../routes/Auth';\n\nconst AppRouter = ({ userObj, loggedIn, refreshName }) => {\n    return (\n        <>\n            <BrowserRouter>\n                <Navigation userObj={userObj} />\n                <Switch>\n\n                    <Route path=\"/\" exact>\n                        {loggedIn ? <Home userObj={userObj} loggedIn={loggedIn} /> : <Auth />}\n                    </Route>\n                    <Route path=\"/profile\" exact>\n                        <Profile userObj={userObj} refreshName={refreshName} />\n                    </Route>\n                </Switch>\n\n\n            </BrowserRouter>\n            <div>\n                AppRouter다!\n            </div>\n\n        </>\n    );\n};\n\nexport default AppRouter;","import React, { useEffect, useState } from 'react'\nimport { authService } from '../fbInstance';\nimport AppRouter from './AppRouter';\n\nfunction App() {\n  const [userObj, setUserObj] = useState(null)\n\n  useEffect(() => {\n    authService.onAuthStateChanged(authService.getAuth(), user => {\n      console.log(\"onAuthStateChanged\", user);\n      console.log(authService.getAuth().currentUser.uid);\n      setUserObj(user);\n    })\n  })\n\n  const refreshName = () => {\n    setUserObj(Object.assign({}, authService.getAuth()))\n  }\n  return (\n    <>\n      {userObj && <AppRouter userObj={userObj} loggedIn={userObj !== null} refreshName={refreshName} />}\n    </>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}